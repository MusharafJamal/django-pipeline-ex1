# .github/workflows/ci-cd-pipeline.yml

name: Django CI/CD Pipeline

# Run this workflow on every push to the 'main' branch
on:
  push:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest # Use a standard Linux runner

    steps:
      # Step 1: Check out the repository code so the runner can access it
      - name: Check out repository
        uses: actions/checkout@v3

      # Step 2: Set up Python
      # This action installs a specific version of Python for our job
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Step 3: Install dependencies
      # Use pip to install the packages from our requirements file
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4: Run Tests (The "CI" part)
      # This is a critical step. It runs Django's built-in test framework.
      # If any tests fail, the entire pipeline fails, preventing bad code from proceeding.
      - name: Run Django Tests
        run: |
          python manage.py test myapp

      # Step 5: Log in to GitHub Container Registry
      # This is needed to push the Docker image we are about to build
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 6: Build and Push Docker Image (The "CD" part)
      # This step builds the Docker image using our Dockerfile and pushes it
      # to the GitHub Container Registry, creating a packaged, deployable artifact.
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}:${{ github.sha }}